
# DATABASE SETUP OPTIONS:

# You have several options to set up the database for this project:

# OPTION 1: Prisma Local PostgreSQL (Recommended for development)
# This uses Prisma's built-in PostgreSQL development server
# To set this up:
# 1. Make sure you have Prisma CLI installed: npm install -g prisma (or use npx)
# 2. Run: npx prisma dev
#    This command will:
#    - Start a local PostgreSQL server
#    - Automatically generate a DATABASE_URL with the API key
#    - Display the connection string in your terminal
# 3. Copy the entire DATABASE_URL from the terminal output
# 4. Paste it below (it will look similar to this but with different port/key):
DATABASE_URL="prisma+postgres://localhost:YOUR_PORT/?api_key=YOUR_GENERATED_API_KEY"

# The API key is automatically generated by Prisma and contains encoded connection details.
# You don't need to create or configure anything manually - just run `npx prisma dev`!

# OPTION 2: Local PostgreSQL Installation
# If you prefer to use your own PostgreSQL installation:
# 1. Install PostgreSQL on your system
# 2. Create a database for the project
# 3. Use this format:
# DATABASE_URL="postgresql://username:password@localhost:5432/loan_management_db?schema=public"

# OPTION 3: Cloud PostgreSQL (Production/Team environments)
# For production or shared environments, use a cloud provider like:
# - Supabase: https://supabase.com/ (free tier available)
# - Railway: https://railway.app/ (free tier available)
# - Render: https://render.com/ (free tier available)
# - AWS RDS, Google Cloud SQL, or Azure Database
# DATABASE_URL="postgresql://username:password@your-host:5432/your-database?schema=public"

# SETUP INSTRUCTIONS:
# 1. Copy this file: cp .env.example .env
# 2. Choose one of the database options above
# 3. Update the DATABASE_URL with your actual connection string
# 4. Run: npm run db:migrate (or npx prisma migrate dev)
# 5. Run: npm run dev to start the application

